#include <iostream>
#include <fstream>
#include <string>

using namespace std;

string int2str(int i);

int main()
{
  const int n = 21;
  int j;
  string basename("tinyfad"), name;

  for (int i=1; i<n; ++i){
    name = basename + int2str(i) + ".h";
    ofstream fic(name.c_str());
    fic << "#ifndef _tinyfad" << int2str(i) << "_h_\n#define _tinyfad" << int2str(i) << "_h_\n\n"
	<< "//*********************************************************\n"
	<< "// This file is generated by generate.cc.\n"
	<< "// Use this file for any modification\n"
	<< "//*********************************************************\n\n"
	<< "template <class T> class TinyFad<"<< i << ",T> {\n"
	<< "public:\n"
	<< "  typedef T value_type;\n"
	<< "  typedef T grad_type;\n"
	<< "protected:\n\n"
	<< "  int n;\n"
	<< "  T val_;\n\n";
    for (j=0; j<i; ++j){
      fic << "  T dx" << j << "_;\n";
    }
    fic << "\n\npublic:\n"
	<< "  void diff(const size_t ith, const size_t sz){\n"
	<< "     n = ith+1;\n";
    for (j=0; j<i; ++j){
      fic << "     dx" << j << "_ = T(0.);\n";
    }
    fic	<< "\n"
	<< "     switch(ith){\n";
    for (j=0; j<i; ++j){
      fic << "     case " << j << " : dx" << j << "_ = T(1.);break;\n";
    }
    fic << "     default : cout << \"ith = \" << ith << \"  out of definition set\" << endl;exit(1);\n"
	<< "     }\n"     
	<< "  }\n\n"
	<< "  TinyFad(const T& ind, const int ini) : n(ini+1), val_(ind) {\n";
    for (j=0; j<i; ++j){
      fic << "     dx" << j << "_ = T(0.);\n";
    }
    fic	<< "\n"
	<< "     switch(ini){\n";
    for (j=0; j<i; ++j){
      fic << "     case " << j << " : dx" << j << "_ = T(1.);break;\n";
    }
    fic << "     default : cout << \"ini = \" << ini << \"  out of definition set\" << endl;exit(1);\n"
	<< "     }\n";
    fic	<< "  }\n"
	<< "  TinyFad() : n(0), val_(0.) {\n";
    for (j=0; j<i; ++j){
      fic << "     dx" << j << "_ = T(0.);\n";
    }
    fic	<< "  }\n"
	<< "  TinyFad(const No_Initialization &): n(0) {}\n"
	<< "  TinyFad(const T& in) : n(0), val_(in) {\n";
    for (j=0; j<i; ++j){
      fic << "     dx" << j << "_ = T(0.);\n";
    }
    fic	<< "  }\n"
	<< "  TinyFad(const TinyFad<" << i << ",T> & in) : n(0), val_(in.val_) {\n";
    for (j=0; j<i; ++j){
      fic << "     dx" << j << "_ = in.dx" << j << "_;\n";
    }
    fic	<< "  }\n\n"
	<< "  ~TinyFad() {}\n\n"
	<< "  int    N()       const {return n-1;}\n\n"
	<< "  const T& val()     const { return val_;}\n"
	<< "  T& val()                 { return val_;}\n\n";
    for (j=0; j<i; ++j){
      fic << "  const T& d" << j << "() const { return dx" << j << "_;}\n"
	  << "  T& d" << j << "() { return dx" << j << "_;}\n\n";
    }
    fic	<< "  T& dx(int i){\n"
	<< "     switch(i){\n";
    for (j=0; j<i; ++j){
      fic << "     case " << j << " : return dx" << j << "_;\n";
    }
    fic << "     default : cout << \"i out of bounds\" << endl;exit(1);\n"
	<< "     }\n"     
	<< "  }\n"
    	<< "  const T& dx(int i) const {\n"
	<< "     switch(i){\n";
    for (j=0; j<i; ++j){
      fic << "     case " << j << " : return dx" << j << "_;\n";
    }
    fic << "     default : cout << \"i out of bounds\" << endl;exit(1);\n"
	<< "     }\n"     
	<< "  }\n"
    	<< "  T& d(int i){\n"
	<< "     switch(i){\n";
    for (j=0; j<i; ++j){
      fic << "     case " << j << " : return dx" << j << "_;\n";
    }
    fic << "     default : cout << \"i out of bounds\" << endl;exit(1);\n"
	<< "     }\n"     
	<< "  }\n"
    	<< "  const T& d(int i) const {\n"
	<< "     switch(i){\n";
    for (j=0; j<i; ++j){
      fic << "     case " << j << " : return dx" << j << "_;\n";
    }
    fic << "     default : cout << \"i out of bounds\" << endl;exit(1);\n"
	<< "     }\n"     
	<< "  }\n\n"
    	<< "  TinyFad<" << i << ",T> & operator = (const TinyFad<" << i << ",T> & in){\n"
	<< "     val_ = in.val_;\n\n";
    for (j=0; j<i; ++j){
      fic << "     dx" << j << "_ = in.dx" << j << "_;\n";
    }
    fic << "\n     return *this;\n"
	<< "  }\n\n"
    	<< "  TinyFad<" << i << ",T> & operator = (const T & in){\n"
	<< "     val_ = in;\n\n";
    for (j=0; j<i; ++j){
      fic << "     dx" << j << "_ = T(0.);\n";
    }
    fic << "\n     return *this;\n"
	<< "  }\n\n"
	<< "  TinyFad<" << i << ",T> & operator += (const TinyFad<" << i << ",T> & in){\n";
    for (j=0; j<i; ++j){
      fic << "     dx" << j << "_ += in.dx" << j << "_;\n";
    }
    fic << "     val_ += in.val_;\n\n"
	<< "\n    return *this;\n"
	<< "  }\n"
	<< "  TinyFad<" << i << ",T> & operator -= (const TinyFad<" << i << ",T> & in){\n";
    for (j=0; j<i; ++j){
      fic << "     dx" << j << "_ -= in.dx" << j << "_;\n";
    }
    fic << "     val_ -= in.val_;\n\n"
	<< "     return *this;\n"
	<< "  }\n"
	<< "  TinyFad<" << i << ",T> & operator *= (const TinyFad<" << i << ",T> & in){\n";
    for (j=0; j<i; ++j){
      fic << "     dx" << j << "_ = dx" << j << "_ * in.val_ + val_ * in.dx" << j << "_;\n";
    }
    fic << "     val_ *= in.val_;\n\n"
	<< "     return *this;\n"
	<< "  }\n"
	<< "  TinyFad<" << i << ",T> & operator /= (const TinyFad<" << i << ",T> & in){\n"
	<< "     if (in.val_ == 0.) error(\"TinyFad & TinyFad::operator /= (const TinyFad & in), dividing by 0\");\n";
    for (j=0; j<i; ++j){
      fic << "     dx" << j << "_ = ( dx" << j << "_ * in.val_ - val_ * in.dx" << j << "_ ) / in.val_ / in.val_ ;\n";
    }
    fic << "     val_ /= in.val_;\n\n"
	<< "     return *this;\n"
	<< "  }\n\n"
	<< "  TinyFad<" << i << ",T> & operator += (const T & in){"
	<< "     val_ += in;\n\n"
	<< "     return *this;\n"
	<< "  }\n"
	<< "  TinyFad<" << i << ",T> & operator -= (const T & in){"
	<< "     val_ -= in;\n\n"
	<< "     return *this;\n"
	<< "  }\n"
	<< "  TinyFad<" << i << ",T> & operator *= (const T & in){\n"
	<< "     val_ *= in;\n\n";
    for (j=0; j<i; ++j){
      fic << "     dx" << j << "_ *= in;\n";
    }
    fic	<< "\n     return *this;\n"
	<< "  }\n"
	<< "  TinyFad<" << i << ",T> & operator /= (const T & in){\n"
	<< "     if ( in == T(0.) ) error(\"TinyFad & TinyFad::operator /= (const T & in), dividing by 0\");\n"
	<< "     val_ /= in;\n\n";
    for (j=0; j<i; ++j){
      fic << "     dx" << j << "_ /= in;\n";
    }
    fic	<< "\n     return *this;\n"
	<< "  }\n\n"
	<< "  TinyFad<" << i << ",T> operator++(int){\n"
	<< "     TinyFad<" << i << ",T> tmp(*this);\n"
	<< "     tmp.val_++;\n"
	<< "     return tmp;\n"
	<< "  };\n"
	<< "  TinyFad<" << i << ",T> operator--(int){\n"
	<< "     TinyFad<" << i << ",T> tmp(*this);\n"
	<< "     tmp.val_--;\n"
	<< "     return tmp;\n"
	<< "  };\n"
	<< "  TinyFad<" << i << ",T> & operator++(){"
	<< "     ++val_;\n"
	<< "     return *this;\n"
	<< "  }\n"
	<< "  TinyFad<" << i << ",T> & operator--(){"
	<< "     --val_;\n"
	<< "     return *this;\n"
	<< "  }\n"
	<< "};\n\n\n"
	<< "template <class T> inline TinyFad<" << i << ",T> operator + (const TinyFad<" << i << ",T>& in)\n"
	<< "{\n"
	<< "  return TinyFad<" << i << ",T>(in);\n"
	<< "}\n\n"
	<< "template <class T> inline TinyFad<" << i << ",T> operator - (const TinyFad<" << i << ",T>& in)\n"
	<< "{\n"
	<< "  TinyFad<" << i << ",T> tmp;\n"
	<< "  tmp -= in;\n"
	<< "  return tmp; \n"
	<< "}\n\n"
	<< "template <class L, class R> inline\n"
	<< "TinyFad<" << i << ",typename NumericalTraits<L,R>::promote >\n"
	<< "operator +(const TinyFad<" << i << ",L>& un, const TinyFad<" << i << ",R>& deux) {\n\n"
	<< "  typedef typename NumericalTraits<L,R>::promote value_type;\n\n"
	<< "  No_Initialization nothing;\n"
	<< "  TinyFad<" << i << ",value_type> tmp( nothing );\n\n";
    for (j=0; j<i; ++j){
      fic	<< "  tmp.d" << j << "() = un.d" << j << "() + deux.d" << j << "();\n\n";
    }
    fic	<< "  tmp.val() = un.val() + deux.val();\n\n"
	<< "  return tmp;\n"
	<< "}\n\n"
	<< "template <class L, class R> inline\n"
	<< "TinyFad<" << i << ",typename NumericalTraits<L,R>::promote>\n"
	<< "operator +(const TinyFad<" << i << ",L>& un, const R& deux) {\n\n"
	<< "  typedef typename NumericalTraits<L,R>::promote value_type;\n\n"
	<< "  No_Initialization nothing;\n"
	<< "  TinyFad<" << i << ",value_type> tmp( nothing );\n\n";
    for (j=0; j<i; ++j){
      fic	<< "  tmp.d" << j << "() = un.d" << j << "();\n\n";
    }
    fic	<< "  tmp.val() = un.val() + deux;\n\n"
	<< "  return tmp;\n"
	<< "}\n\n"
	<< "template <class L, class R> inline\n"
	<< "TinyFad<" << i << ",typename NumericalTraits<L,R>::promote >\n"
	<< "operator +(const L& un, const TinyFad<" << i << ",R>& deux) {\n"
	<< "  return operator +(deux,un);\n"
	<< "}\n\n"
	<< "template <class L, class R> inline\n"
	<< "TinyFad<" << i << ",typename NumericalTraits<L,R>::promote >\n"
	<< "operator *(const TinyFad<" << i << ",L>& un, const TinyFad<" << i << ",R>& deux) {\n\n"
	<< "  typedef typename NumericalTraits<L,R>::promote value_type;\n\n"
	<< "  No_Initialization nothing;\n"
	<< "  TinyFad<" << i << ",value_type> tmp( nothing );\n\n";
    for (j=0; j<i; ++j){
      fic	<< "  tmp.d" << j << "() = un.d" << j << "()*deux.val() + un.val() * deux.d" << j << "();\n\n";
    }
    fic	<< "  tmp.val() = un.val() * deux.val();\n\n"
	<< "  return tmp;\n"
	<< "}\n\n"
	<< "template <class L, class R> inline\n"
	<< "TinyFad<" << i << ",typename NumericalTraits<L,R>::promote >\n"
	<< "operator *(const TinyFad<" << i << ",L>& un, const R& deux) {\n\n"
	<< "  typedef typename NumericalTraits<L,R>::promote value_type;\n\n"
	<< "  No_Initialization nothing;\n"
	<< "  TinyFad<" << i << ",value_type> tmp( nothing );\n\n";
    for (j=0; j<i; ++j){
      fic	<< "  tmp.d" << j << "() = un.d" << j << "()*deux;\n\n";
    }
    fic	<< "  tmp.val() = un.val() * deux;\n\n"
	<< "  return tmp;\n"
	<< "}\n\n"
	<< "template <class L, class R> inline\n"
	<< "TinyFad<" << i << ",typename NumericalTraits<L,R>::promote >\n"
	<< "operator *(const L& un, const TinyFad<" << i << ",R>& deux) {\n\n"
	<< "  return operator *(deux,un);\n"
	<< "}\n\n\n"
	<< "template <class L, class R> inline\n"
	<< "TinyFad<" << i << ",typename NumericalTraits<L,R>::promote >\n"
	<< "operator -(const TinyFad<" << i << ",L> & un, const TinyFad<" << i << ",R> & deux) {\n\n"
	<< "  typedef typename NumericalTraits<L,R>::promote value_type;\n\n"
	<< "  No_Initialization nothing;\n"
	<< "  TinyFad<" << i << ",value_type> tmp( nothing );\n\n";
    for (j=0; j<i; ++j){
      fic	<< "  tmp.d" << j << "() = un.d" << j << "() - deux.d" << j << "();\n\n";
    }
    fic	<< "  tmp.val() = un.val() - deux.val();\n\n"
	<< "  return tmp;\n"
	<< "}\n\n"
	<< "template <class L, class R> inline\n"
	<< "TinyFad<" << i << ",typename NumericalTraits<L,R>::promote>\n"
	<< "operator -(const L & un, const TinyFad<" << i << ",R> & deux) {\n\n"
	<< "  typedef typename NumericalTraits<L,R>::promote value_type;\n\n"
	<< "  No_Initialization nothing;\n"
	<< "  TinyFad<" << i << ",value_type> tmp( nothing );\n\n";
    for (j=0; j<i; ++j){
      fic	<< "  tmp.d" << j << "() -= deux.d" << j << "();\n\n";
    }
    fic	<< "  tmp.val() = un - deux.val();\n\n"
	<< "  return tmp;\n"
	<< "}\n\n"
	<< "template <class L, class R> inline\n"
	<< "TinyFad<" << i << ", typename NumericalTraits<L,R>::promote > \n"
	<< "operator -(const TinyFad<" << i << ",L> & un, const R & deux) {\n"
	<< "  typedef typename NumericalTraits<L,R>::promote value_type;\n\n"
	<< "  No_Initialization nothing;\n"
	<< "  TinyFad<" << i << ",value_type> tmp( nothing );\n\n";
    for (j=0; j<i; ++j){
      fic	<< "  tmp.d" << j << "() = un.d" << j << "();\n\n";
    }
    fic	<< "  tmp.val() = un.val() - deux;\n\n"
	<< "  return tmp;\n"
	<< "}\n\n"
	<< "template <class L, class R> inline\n"
	<< "TinyFad<" << i << ", typename NumericalTraits<L,R>::promote > \n"
	<< "operator /(const TinyFad<" << i << ",L> & un, const TinyFad<" << i << ",R> & deux) {\n\n"
	<< "  typedef typename NumericalTraits<L,R>::promote value_type;\n\n"
	<< "  if (deux.val() == 0.) error(\"TinyFad & TinyFad::operator /(const TinyFad<" << i << ",L> & un, const TinyFad<" << i << ",R> & deux), dividing by 0\");\n\n"
	<< "  No_Initialization nothing;\n"
	<< "  TinyFad<" << i << ",value_type> tmp( nothing );\n"
	<< "  value_type dval = deux.val();\n\n";
    for (j=0; j<i; ++j){
      fic	<< "  tmp.d" << j << "() = ( un.d" << j << "()* deux.val() - un.val() * deux.d" << j << "() ) / dval / dval ;\n\n";
    }
    fic	<< "  tmp.val() = un.val() / dval;\n\n"
	<< "  return tmp;\n"
	<< "}\n\n"
	<< "template <class L, class R> inline\n"
	<< "TinyFad<" << i << ", typename NumericalTraits<L,R>::promote > \n"
	<< "operator /(const L & un, const TinyFad<" << i << ",R> & deux) {\n\n"
	<< "  typedef typename NumericalTraits<L,R>::promote value_type;\n\n"
	<< "  if (deux.val() == 0.) error(\"TinyFad & TinyFad::operator /(const L & un, const TinyFad<" << j << ",R> & deux), dividing by 0\");\n\n"
	<< "  No_Initialization nothing;\n"
	<< "  TinyFad<" << i << ",value_type> tmp( nothing );\n"
	<< "  value_type dval = deux.val();\n\n";
    for (j=0; j<i; ++j){
      fic	<< "  tmp.d" << j << "() = - un * deux.d" << j << "()  / dval / dval ;\n\n";
    }
    fic	<< "  tmp.val() = un / dval;\n\n"
	<< "  return tmp;\n"
	<< "}\n\n"
	<< "template <class  L, class R> inline\n"
	<< "TinyFad<" << i << ", typename NumericalTraits<L,R>::promote > \n"
	<< "operator /(const TinyFad<" << i << ",L> & un, const R & deux) {\n\n"
	<< "  typedef typename NumericalTraits<L,R>::promote value_type;\n\n"
	<< "  if (deux == 0.) error(\"TinyFad & TinyFad::operator /(const TinyFad<" << i << ",L> & un, const R & deux), dividing by 0\");\n\n"
	<< "  No_Initialization nothing;\n"
	<< "  TinyFad<" << i << ",value_type> tmp( nothing );\n\n";
    for (j=0; j<i; ++j){
      fic	<< "  tmp.d" << j << "() = un.d" << j << "()  / deux;\n\n";
    }
    fic	<< "  tmp.val() = un.val() / deux;\n\n"
	<< "   return tmp;\n"
	<< "}\n\n"





	<< "template <class T> TinyFad<" << i << ",T> exp (const TinyFad<" << i << ",T>& in)\n"
	<< "{\n"
	<< "  TinyFad<" << i << ",T> tmp(exp(in.val()));\n\n";
    for (j=0; j<i; ++j){
      fic << "  tmp.d" << j << "() = in.d" << j << "()*exp(in.val());\n";
    }
    fic	<< "\n  return tmp;\n"
	<< "}\n\n" 
	<< "template <class T> TinyFad<" << i << ",T> log (const TinyFad<" << i << ",T>& in)\n"
	<< "{\n"
	<< "  if ( in.val() <= 0) error(\"TinyFad log (const TinyFad& in) : zero or negative value\");\n"
	<< "  TinyFad<" << i << ",T> tmp(log(in.val()));\n\n";
    for (j=0; j<i; ++j){
      fic	<< "  tmp.d" << j << "() = in.d" << j << "() / in.val();\n";
    }
    fic	<< "\n  return tmp;\n"
	<< "}\n\n"
	<< "template <class T> TinyFad<" << i << ",T> sqrt (const TinyFad<" << i << ",T>& in)\n"
	<< "{\n"
	<< "  if ( in.val() < 0. ) error(\"TinyFad<" << i << ",T> sqrt (const TinyFad& in) : negative value\");\n"
	<< "  TinyFad<" << i << ",T> tmp(sqrt(in.val()));\n\n"
	<< "  bool test=true;\n"
	<< "  if ( in.val() == T(0.) ){\n";
    for (j=0; j<i; ++j){
      fic	<< "    if ( in.d" << j << "() != T(0.) ) test = false;\n\n";
    }
    fic	<< "    if ( !test )\n"
	<< "      error(\"TinyFad<" << i << ",T> sqrt (const TinyFad& in) : null value\");\n"
	<< "  }\n"
	<< "  else {\n";
    for (j=0; j<i; ++j){
      fic << "    tmp.d" << j << "() = in.d" << j << "() / sqrt(in.val()) / 2.;\n";
    }
    fic << "  }\n"
	<< "\n  return tmp;\n"
	<< "}\n\n"
	<< "template <class T> TinyFad<" << i << ",T> sin (const TinyFad<" << i << ",T>& in)\n"
	<< "{\n"
	<< "  TinyFad<" << i << ",T> tmp( sin(in.val()) );\n\n";
    for (j=0; j<i; ++j){
      fic << "  tmp.d" << j << "() = in.d" << j << "() * cos( in.val() );\n";
    }
    fic << "\n  return tmp;\n"
	<< "}\n\n"
	<< "template <class T> TinyFad<" << i << ",T> cos (const TinyFad<" << i << ",T>& in)\n"
	<< "{\n"
	<< "  TinyFad<" << i << ",T> tmp(cos(in.val()));\n\n";
    for (j=0; j<i; ++j){
      fic << "  tmp.d" << j << "() = - in.d" << j << "() * sin( in.val() );\n";
    }
    fic << "\n  return tmp;\n"
	<< "}\n\n"
	<< "template <class T> TinyFad<" << i << ",T> tan (const TinyFad<" << i << ",T>& in)\n"
	<< "{\n"
	<< "  if ( in.val() == 0) error(\"TinyFad tan (const TinyFad& in) undiefined in 0.\");\n"
	<< "  TinyFad<" << i << ",T> tmp(tan(in.val()));\n\n"
	<< "  T cosinus = cos(in.val());\n";
    for (j=0; j<i; ++j){
      fic << "  tmp.d" << j << "() = in.d" << j << "() / cosinus / cosinus;\n";
    }
    fic << "\n  return tmp;\n"
	<< "}\n\n"
	<< "template <class T> TinyFad<" << i << ",T> pow (const TinyFad<" << i << ",T>& in, double e)\n"
	<< "{\n"
	<< "  TinyFad<" << i << ",T> tmp(pow(in.val(), e));\n\n";
    for (j=0; j<i; ++j){
      fic << "  tmp.d" << j << "() = e*in.d" << j << "()*pow(in.val(), e-1);\n";
    }
    fic << "\n  return tmp;\n"
	<< "}\n\n"
	<< "template <class T> TinyFad<" << i << ",T> pow (const TinyFad<" << i << ",T>& un, const TinyFad<" << i << ",T>& deux)\n"
	<< "{\n"
	<< "  if (un.val() == 0) error(\"TinyFad pow (const TinyFad& un, const TinyFad& deux), un = 0. \");\n"
	<< "  TinyFad<" << i << ",T> tmp(pow(un.val(), deux.val()));\n\n";
    for (j=0; j<i; ++j){
      fic << "  tmp.d" << j << "() = deux.d" << j << "() * log(un.val()) * pow(un.val(), deux.val())\n"
	  << "	    + deux.val() * un.d" << j << "() * pow(un.val(), deux.val()-1);\n";
    }
    fic << "\n  return tmp;\n"
	<< "}\n\n"
	<< "template <class T> TinyFad<" << i << ",T> pow (const TinyFad<" << i << ",T>& in, const int e)\n"
	<< "{\n"
	<< "  TinyFad<" << i << ",T> tmp( pow((double)in.val(), (double)e) );\n\n";;
    for (j=0; j<i; ++j){
      fic << "  tmp.d" << j << "() = e*in.d" << j << "()*pow((double)in.val(), (double)e-1);\n";
    }
    fic << "\n  return tmp;\n"
	<< "}\n\n"
	<< "template <class T> TinyFad<" << i << ",T> abs (const TinyFad<" << i << ",T>& in)\n"
	<< "{\n"
	<< "  int sign = in.val() > 0? 1:0;\n\n"
	<< "  if (sign) return in;\n"
	<< "  else return (-in);\n"
	<< "}\n\n"
	<< "template <class T> ostream& operator << (ostream& os, const TinyFad<" << i << ",T>& a)\n"
	<< "{\n"
	<< "  os.setf(ios::fixed,ios::scientific);\n"
	<< "  os.width(12);\n"
	<< "  os << a.val() << \"  [\";\n\n";
    for (j=0; j<i; ++j){
      fic << "  os.width(12);\n"
	  << "  os << a.d" << j << "();\n";
    }
    fic << "\n  os << \"]\";\n"
	<< "\n  return os;\n"
	<< "}\n"
	<< "\n\n#endif\n";
  }


  return 0;
}


string int2str(int i)
{
  switch(i){
  case  1 : return string("one");
  case  2 : return string("two");
  case  3 : return string("three");
  case  4 : return string("four");
  case  5 : return string("five");
  case  6 : return string("six");
  case  7 : return string("seven");
  case  8 : return string("eight");
  case  9 : return string("nine");
  case 10 : return string("ten");
  case 11 : return string("eleven");
  case 12 : return string("twelve");
  case 13 : return string("thirteen");
  case 14 : return string("fourteen");
  case 15 : return string("fifteen");
  case 16 : return string("sixteen");
  case 17 : return string("seventeen");
  case 18 : return string("eighteen");
  case 19 : return string("nineteen");
  case 20 : return string("twenty");
  default : cout << "i out of definition set" << endl;exit(1);
  }

}
