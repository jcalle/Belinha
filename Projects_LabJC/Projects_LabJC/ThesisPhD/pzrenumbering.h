// Generated by Together

#ifndef TPZRENUMBERING_H
#define TPZRENUMBERING_H

#include "pzvec.h"
/**This abstract class defines the behaviour which derived classes
need to implement
for implementing node sequence numbering optimization*/
class TPZRenumbering {
public:
  TPZRenumbering(int NElements, int NNodes);
/**This method declares the element graph to the object
The first vector contains the element node number
The second vector contains the number of nodes of each element*/
virtual void SetElementGraph(TPZVec<int> &elgraph, TPZVec<int> &numelnodes) = 0;
/**Sets the number of equations associated with each node
The derived class may or may not take this data into
consideration*/
virtual void SetNodeWeights(TPZVec<int> &weights) = 0;
/**This will reset all datastructures the object may contain.
Node resequencing algorithms may require a possibly large
amount of temporary data*/
virtual void ClearDataStructures() =0;

public:
/**Will convert an element graph defined by elgraph and elgraphindex
into a node graph defined by nodegraph and nodegraphindex*/
  void ConvertGraph(TPZVec<int> &elgraph, TPZVec<int> &elgraphindex, TPZVec<int> &nodegraph, TPZVec<int> &nodegraphindex);

  /**
   * Will assign a color to the nodes in the graph such that no two connected nodes have the same color
   * the return value indicates the number of colors in the graph
   */
  int ColorNodes(TPZVec<int> &nodegraph, TPZVec<int> &nodegraphindex, TPZVec<int> &family, TPZVec<int> &colors);
protected:
/**Number of elements in the graph*/
  int fNElements;
/**Number of nodes in the graph*/
  int fNNodes;
};

#endif //TPZRENUMBERING_H
















